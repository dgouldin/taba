"""
Copyright 2012 TellApart, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

------------------------------------------------------------

Base Taba Handler. Specifies the interface all Handlers must implement.
"""

class TabaHandler(object):
  """'Abstract' base class for all Taba Handlers. Specifies the interface that
  must be implemented.

  IMPORTANT: TabaHandler sub-classes must be state-less.
  """

  # Indicator of the current State object schema version. Sub-classes should
  # overwrite this value, and increment it each time the State schema changes.
  # The Upgrade method should also be capable of converting a State object from
  # each legacy version to the current one.
  CURRENT_VERSION = 0

  def NewState(self, client_id, name):
    """For the given client_id and name, generate a new State object. The object
    must be pickle-able.

    Args:
      client_id - The Client ID this state is representing.
      name - The Taba Name this state is representing.

    Returns:
      A newly initialized State object.
    """
    raise NotImplementedError()

  def FoldEvents(self, state, events):
    """Given a State object and a list of events for a single Client ID and Taba
    Name, fold the events into the State, and return the updated State.

    Args:
      state - A State object of the type returned by NewState().
      events - A list of TabaEvent tuples for a single Client and Taba Name.

    Returns:
      A State object with the events folded in.
    """
    raise NotImplementedError()

  def ProjectState(self, state):
    """Given a State object of the type generated by NewState(), generate a
    projection that can be aggregated. A projection must have the form
    {String: Object}. (e.g.: {'count': 100, 'total': 234})

    NOTE: Projections and Aggregates must have the same schema. It must also be
    possible to aggregate Aggregates and Projections.

    Args:
      state - A State object of the type returned by NewState().

    Returns:
      A projection of the given State.
    """
    raise NotImplementedError()

  def Aggregate(self, projections):
    """Take a list of projections and/or aggregates, and generate a single
    aggregation.
    e.g.: [{'cnt':10, 'tot':'15'}, {'cnt':20, 'tot':22}] => {'cnt':30, 'tot':37}

    NOTE: Projections and Aggregates must have the same schema. It must also be
    possible to aggregate Aggregates and Projections.

    Args:
      projections - A list of projections generated by ProjectState().

    Returns:
      A single aggregation of all the projections.
    """
    raise NotImplementedError()

  def Render(self, name, projections):
    """Take a list of projections or aggregations and generate a list of string
    representations.

    Args:
      name - Taba Name of the projections or aggregates to render.
      projections - A list of projections or aggregates.

    Returns:
      A list of strings representing the projections or aggregates.
    """
    raise NotImplementedError()

  def Upgrade(self, state, version):
    """Upgrade a State object from the given version to the current version. The
    implementation of this method should be capable of converting a State object
    from any legacy version to the current one.

    Args:
      state - State object to upgrade.
      version - Version of the given State.

    Returns:
      State object upgraded to the current version schema.
    """
    raise NotImplementedError()

  def ShouldPrune(self, state):
    """Given a State object, return a boolean indicating whether the given State
    should be deleted from the database.

    Args:
      state - A State object of the type returned by NewState().

    Returns:
      True if the State should be deleted. False otherwise.
    """
    raise NotImplementedError()
